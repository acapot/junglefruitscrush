package {	import flash.display.MovieClip;	import flash.events.Event;	import flash.filters.BlurFilter;	import flash.utils.Timer;	import flash.events.TimerEvent;		import flash.display.DisplayObject;	//import FruitsPanel;			public class Fruits extends MovieClip	{		public static var size:int;		public static var alphaAttr:uint;				public static var runMotor:Boolean;		public static var rdnEcoFrequency:Number; //to change the eco fruit quantity		public static var countToReverse:int;				public static var isThereCrushed:Boolean;		public static var moveBelow:Boolean;		public static var pointsFruit:int;				private var __crushed:Boolean;		private var __velocity:Number;		private var __interPos:Boolean;		private var __posX:int;		private var __posY:int;		private var __fruitRandom:uint;		private var __positionInGame:uint;		private var __moveTimer:Timer = new Timer( 500 );		private var __newPosX:int;		private var __newPosY:int;		private var __prevPosX:int;		private var __prevPosY:int;		private var __revPos:Boolean;		private var __isThereBelow:Boolean;						public function Fruits(px:int, py:int)		{			__posX = px;			__posY = py;			addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);					}				private function onAddedToStage(event:Event)		{			// static fruitsvariables			Fruits.size=70;			Fruits.moveBelow = false;			Fruits.pointsFruit = 30;			runMotor = true;						//those instances are into the object in the simbols 			eco.visible = false;			yog.visible = false;			this.corners.visible = false;						this.x = __posX;			this.y = __posY;			__velocity = 1;			__interPos = false;			__revPos	 = false;												isThereCrushed = false;			__isThereBelow = false;						countToReverse = 0;						this.width=size;			this.height=size;			alphaAttr=1;						generateFrame();						addEventListener(Event.ENTER_FRAME, onEnter);					}				private function onEnter(event:Event)		{			if(__interPos)			{				interchangePos();			}			if(__revPos)			{				reversePos();						}						//trace("runMotor:"+runMotor);			if(runMotor)			{				moveBelow();			}		}						public function interchangePos()		{			runMotor = false;			if(__newPosY == this.y && __newPosX == this.x)			{				__interPos = false;				//endAnimation = true;				//trace("npy: "+newPosY+" ty: "+this.y+" npx:"+newPosX+" tx:"+this.x)								countToReverse++;				//trace("--------------------------------------------------");				//trace("countToReverse"+countToReverse);									FruitsPanel.collisionH();					FruitsPanel.collisionV();									for(var c:int=0; c < FruitsPanel.fruitsArray.length; c++)				{					if(FruitsPanel.fruitsArray[c].__crushed)					{						isThereCrushed = true;					}				}								/*trace("crushedrrrrrrrrrrrr: "+crushed);				trace("FruitsPanel.target.crushedrrrrrrrrrrrr: "+FruitsPanel.currTarget.crushed);				trace("FruitsPanel.prevTarget.crushedrrrrrrrrrrrr: "+FruitsPanel.prevTarget.crushed);				trace("crushedrrrrrrrrrrrr: "+positionInGame);				trace("FruitsPanel.target.crushedrrrrrrrrrrrr: "+FruitsPanel.currTarget.positionInGame);				trace("FruitsPanel.prevTarget.crushedrrrrrrrrrrrr: "+FruitsPanel.prevTarget.positionInGame);*/								if(isThereCrushed && countToReverse == 2)				{					//trace("sssssi hay crushed");					FruitsPanel.changeCorners();					runMotor = true;									}				//else trace("nnnnno hay crushed");								if(!isThereCrushed)				{					//trace("FruitsPanel.target.crushedrrrrrrrrrrrr: "+FruitsPanel.target.crushed);					trace("prevPosx:"+__prevPosX+" prevPosY:"+__prevPosY)										__revPos = true;															reversePos();				}												if(countToReverse == 2)				{					//runMotor = true;					countToReverse = 0;					isThereCrushed = false;				}															}						if(__newPosX < this.x || __newPosY < this.y)			{				__velocity=-10;			}						else			{				__velocity=10;			}						if(__newPosX != this.x)			{				this.x+=__velocity;			}						if(__newPosY != this.y)			{				this.y+=__velocity;			}		}				public function reversePos()		{			//trace("entro a reverse");			runMotor = false;			trace(__prevPosX+" dfasdfas "+__prevPosX);			if(__revPos)			{				//this check if the current position (after exchange_position) was at left (above) or right (below) side, or				if(__prevPosX < this.x || __prevPosY < this.y)				{					__velocity=-10;				}								else				{					__velocity = 10;				}								if(__prevPosX != this.x)				{					this.x += __velocity;				}								if(__prevPosY != this.y)				{					this.y += __velocity;				}								if(__prevPosY == this.y && __prevPosX == this.x)				{					__revPos = false;										FruitsPanel.changeCorners();					//runMotor = true;									}								//revPos=false;			}		}				public function generateFrame()		{			corners.visible = false;			this.fruitBg.alpha = 0;						__fruitRandom = Math.ceil(Math.random()*6);			this.alpha=1;						yog.visible = (Math.random() > rdnEcoFrequency) ? true : false;						this.gotoAndStop(__fruitRandom);		}						public function fruitExplotion()		{						__crushed = false;						this.fruitBg.alpha = .45;			GameSounds.playSound("bang");			//gotoAndPlay('explosion');			//this.scaleY = 1.2;			//this.scaleX = 1.2;			__moveTimer.addEventListener( TimerEvent.TIMER ,remove, false, 0, true);			__moveTimer.start();		}				private function moveBelow()		{			//trace("FruitsPanel.fruitsArray.length:"+FruitsPanel.fruitsArray.length);						for (var i:int = 0; i < FruitsPanel.fruitsArray.length; i++)			{								//if (FruitsPanel.fruitsArray[i].hitBox != null && FruitsPanel.fruitsArray[i] != this && FruitsPanel.fruitsArray[i].y > this.y && FruitsPanel.fruitsArray[i].x == this.x)				if (FruitsPanel.fruitsArray[i] != null && FruitsPanel.fruitsArray[i] != this && FruitsPanel.fruitsArray[i].y > this.y && FruitsPanel.fruitsArray[i].x == this.x)				{					//if (hitTestPoint(FruitsPanel.fruitsArray[i].x,FruitsPanel.fruitsArray[i].y-(Fruits.size/2),false)) 					if (hitTestObject(FruitsPanel.fruitsArray[i]))					{						/*FruitsPanel.fruitsArray[i].takeHit();						GameLoader.score += 25 * (GameLoader.level + 1);						removeSelf();*/						//runMotor= true;						__isThereBelow = true;											}				}							}						//trace("isThereBelow: "+isThereBelow);			if(!__isThereBelow && this.y < 680)			{				//runMotor= false;				this.y+=5;							}			__isThereBelow = false;								}						public function remove(e:TimerEvent) : void		{			__moveTimer.stop();			generateFrame();			this.y = 120-Fruits.size+5;			//this.scaleY = 1;			//this.scaleX = 1;		}				public function removeEvents()		{			removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);			removeEventListener(Event.ENTER_FRAME, onEnter);			//__moveTimer.removeEventListener(TimerEvent.TIMER, remove);			if (parent.contains(this))			{								parent.removeChild(this);							}		}						public function getCrushed():Boolean {        	return this.__crushed;		}				public function setCrushed(val:Boolean){			this.__crushed = val;		}						public function getVelocity():int {        return this.__velocity;		}				public function setVelocity(value:int){			this.__velocity = value;		}						public function getInterPos():Boolean {        return this.__interPos;		}				public function setInterPos(value:Boolean) {			this.__interPos = value;		}						public function getPosX():int {        return this.__posX;		}				public function setPosX(value:int) {			this.__posX = value;		}						public function getPosY():int {        	return this.__posY;		}				public function setPosY(value:int) {			this.__posY = value;		}						public function getPrevPosX():int {        	return this.__prevPosX;		}				public function setPrevPosX(value:int) {			this.__prevPosX = value;		}				public function getPrevPosY():int {        	return this.__prevPosY;		}				public function setPrevPosY(value:int) {			this.__prevPosY = value;		}						public function getFruitRandom():uint {        return this.__fruitRandom;		}				public function setFruitRandom(value:uint) {			this.__fruitRandom = value;		}				public function getPositionInGame():uint {        return this.__positionInGame;		}				public function setPositionInGame(value:uint) {			this.__positionInGame = value;		}				public function getNewPosX():int {        return this.__newPosX;		}				public function setNewPosX(value:int) {			this.__newPosX = value;		}				public function getNewPosY():int {        return this.__newPosY;		}				public function setNewPosY(value:int) {			this.__newPosY = value;		}				public function getRevPos():Boolean {        	return this.__revPos;		}				public function setRevPos(value:Boolean) {			this.__revPos = value;		}						public function getIsThereBelow():Boolean {        return this.__isThereBelow;		}				public function setIsThereBelow(value:Boolean) {			this.__isThereBelow = value;		}	}}